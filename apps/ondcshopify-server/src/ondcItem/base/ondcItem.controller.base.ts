/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OndcItemService } from "../ondcItem.service";
import { OndcItemCreateInput } from "./OndcItemCreateInput";
import { OndcItem } from "./OndcItem";
import { OndcItemFindManyArgs } from "./OndcItemFindManyArgs";
import { OndcItemWhereUniqueInput } from "./OndcItemWhereUniqueInput";
import { OndcItemUpdateInput } from "./OndcItemUpdateInput";

export class OndcItemControllerBase {
  constructor(protected readonly service: OndcItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OndcItem })
  async createOndcItem(
    @common.Body() data: OndcItemCreateInput
  ): Promise<OndcItem> {
    return await this.service.createOndcItem({
      data: data,
      select: {
        availableStock: true,
        category: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OndcItem] })
  @ApiNestedQuery(OndcItemFindManyArgs)
  async ondcItems(@common.Req() request: Request): Promise<OndcItem[]> {
    const args = plainToClass(OndcItemFindManyArgs, request.query);
    return this.service.ondcItems({
      ...args,
      select: {
        availableStock: true,
        category: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OndcItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ondcItem(
    @common.Param() params: OndcItemWhereUniqueInput
  ): Promise<OndcItem | null> {
    const result = await this.service.ondcItem({
      where: params,
      select: {
        availableStock: true,
        category: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OndcItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOndcItem(
    @common.Param() params: OndcItemWhereUniqueInput,
    @common.Body() data: OndcItemUpdateInput
  ): Promise<OndcItem | null> {
    try {
      return await this.service.updateOndcItem({
        where: params,
        data: data,
        select: {
          availableStock: true,
          category: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OndcItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOndcItem(
    @common.Param() params: OndcItemWhereUniqueInput
  ): Promise<OndcItem | null> {
    try {
      return await this.service.deleteOndcItem({
        where: params,
        select: {
          availableStock: true,
          category: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
