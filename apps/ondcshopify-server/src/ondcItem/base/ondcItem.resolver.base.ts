/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OndcItem } from "./OndcItem";
import { OndcItemCountArgs } from "./OndcItemCountArgs";
import { OndcItemFindManyArgs } from "./OndcItemFindManyArgs";
import { OndcItemFindUniqueArgs } from "./OndcItemFindUniqueArgs";
import { CreateOndcItemArgs } from "./CreateOndcItemArgs";
import { UpdateOndcItemArgs } from "./UpdateOndcItemArgs";
import { DeleteOndcItemArgs } from "./DeleteOndcItemArgs";
import { OndcItemService } from "../ondcItem.service";
@graphql.Resolver(() => OndcItem)
export class OndcItemResolverBase {
  constructor(protected readonly service: OndcItemService) {}

  async _ondcItemsMeta(
    @graphql.Args() args: OndcItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OndcItem])
  async ondcItems(
    @graphql.Args() args: OndcItemFindManyArgs
  ): Promise<OndcItem[]> {
    return this.service.ondcItems(args);
  }

  @graphql.Query(() => OndcItem, { nullable: true })
  async ondcItem(
    @graphql.Args() args: OndcItemFindUniqueArgs
  ): Promise<OndcItem | null> {
    const result = await this.service.ondcItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OndcItem)
  async createOndcItem(
    @graphql.Args() args: CreateOndcItemArgs
  ): Promise<OndcItem> {
    return await this.service.createOndcItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => OndcItem)
  async updateOndcItem(
    @graphql.Args() args: UpdateOndcItemArgs
  ): Promise<OndcItem | null> {
    try {
      return await this.service.updateOndcItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OndcItem)
  async deleteOndcItem(
    @graphql.Args() args: DeleteOndcItemArgs
  ): Promise<OndcItem | null> {
    try {
      return await this.service.deleteOndcItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
