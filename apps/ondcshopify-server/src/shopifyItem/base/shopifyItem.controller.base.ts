/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShopifyItemService } from "../shopifyItem.service";
import { ShopifyItemCreateInput } from "./ShopifyItemCreateInput";
import { ShopifyItem } from "./ShopifyItem";
import { ShopifyItemFindManyArgs } from "./ShopifyItemFindManyArgs";
import { ShopifyItemWhereUniqueInput } from "./ShopifyItemWhereUniqueInput";
import { ShopifyItemUpdateInput } from "./ShopifyItemUpdateInput";

export class ShopifyItemControllerBase {
  constructor(protected readonly service: ShopifyItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ShopifyItem })
  async createShopifyItem(
    @common.Body() data: ShopifyItemCreateInput
  ): Promise<ShopifyItem> {
    return await this.service.createShopifyItem({
      data: data,
      select: {
        bodyHtml: true,
        createdAt: true,
        id: true,
        inventoryQuantity: true,
        price: true,
        productType: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ShopifyItem] })
  @ApiNestedQuery(ShopifyItemFindManyArgs)
  async shopifyItems(@common.Req() request: Request): Promise<ShopifyItem[]> {
    const args = plainToClass(ShopifyItemFindManyArgs, request.query);
    return this.service.shopifyItems({
      ...args,
      select: {
        bodyHtml: true,
        createdAt: true,
        id: true,
        inventoryQuantity: true,
        price: true,
        productType: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ShopifyItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shopifyItem(
    @common.Param() params: ShopifyItemWhereUniqueInput
  ): Promise<ShopifyItem | null> {
    const result = await this.service.shopifyItem({
      where: params,
      select: {
        bodyHtml: true,
        createdAt: true,
        id: true,
        inventoryQuantity: true,
        price: true,
        productType: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ShopifyItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShopifyItem(
    @common.Param() params: ShopifyItemWhereUniqueInput,
    @common.Body() data: ShopifyItemUpdateInput
  ): Promise<ShopifyItem | null> {
    try {
      return await this.service.updateShopifyItem({
        where: params,
        data: data,
        select: {
          bodyHtml: true,
          createdAt: true,
          id: true,
          inventoryQuantity: true,
          price: true,
          productType: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ShopifyItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShopifyItem(
    @common.Param() params: ShopifyItemWhereUniqueInput
  ): Promise<ShopifyItem | null> {
    try {
      return await this.service.deleteShopifyItem({
        where: params,
        select: {
          bodyHtml: true,
          createdAt: true,
          id: true,
          inventoryQuantity: true,
          price: true,
          productType: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
