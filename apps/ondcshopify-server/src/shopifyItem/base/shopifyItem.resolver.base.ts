/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ShopifyItem } from "./ShopifyItem";
import { ShopifyItemCountArgs } from "./ShopifyItemCountArgs";
import { ShopifyItemFindManyArgs } from "./ShopifyItemFindManyArgs";
import { ShopifyItemFindUniqueArgs } from "./ShopifyItemFindUniqueArgs";
import { CreateShopifyItemArgs } from "./CreateShopifyItemArgs";
import { UpdateShopifyItemArgs } from "./UpdateShopifyItemArgs";
import { DeleteShopifyItemArgs } from "./DeleteShopifyItemArgs";
import { ShopifyItemService } from "../shopifyItem.service";
@graphql.Resolver(() => ShopifyItem)
export class ShopifyItemResolverBase {
  constructor(protected readonly service: ShopifyItemService) {}

  async _shopifyItemsMeta(
    @graphql.Args() args: ShopifyItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ShopifyItem])
  async shopifyItems(
    @graphql.Args() args: ShopifyItemFindManyArgs
  ): Promise<ShopifyItem[]> {
    return this.service.shopifyItems(args);
  }

  @graphql.Query(() => ShopifyItem, { nullable: true })
  async shopifyItem(
    @graphql.Args() args: ShopifyItemFindUniqueArgs
  ): Promise<ShopifyItem | null> {
    const result = await this.service.shopifyItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ShopifyItem)
  async createShopifyItem(
    @graphql.Args() args: CreateShopifyItemArgs
  ): Promise<ShopifyItem> {
    return await this.service.createShopifyItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ShopifyItem)
  async updateShopifyItem(
    @graphql.Args() args: UpdateShopifyItemArgs
  ): Promise<ShopifyItem | null> {
    try {
      return await this.service.updateShopifyItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShopifyItem)
  async deleteShopifyItem(
    @graphql.Args() args: DeleteShopifyItemArgs
  ): Promise<ShopifyItem | null> {
    try {
      return await this.service.deleteShopifyItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
